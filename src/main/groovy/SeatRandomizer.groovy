/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
import static com.xlson.groovycsv.CsvParser.parseCsv

class SeatRandomizer {
    List<Room> rooms = []
    List<SeatConsumer> consumers = []

    static void main(String[] args) {
        new SeatRandomizer().randomize()
    }

    private void randomize() throws Exception {
        initialize()
        println "Randomizing people and teams to rooms. There are " + rooms*.seats.sum() + " seats and " + consumers*.count.sum() + " consumers in the files."

        //Sort by count, assign biggest teams first because we're not doing this the fancy way
        consumers = consumers.sort { a, b -> a.count < b.count ? 1 : -1 }
        def consumerCounts = consumers.collect { it.count }.unique()
        Random rand = new Random()

        //Assign groups of same size
        consumerCounts.each { consumerCount ->
            //Randomize teams/persons of same count so as not to favour order in CSV
            def suitableConsumers = consumers.findAll { it.count == consumerCount }.sort { Math.random() }
            //Find a room for each person/team
            suitableConsumers.each { seatConsumer ->
                def chosenRoom = getSuitableRoom(seatConsumer, rand)
                chosenRoom.addConsumer(seatConsumer)
            }
        }

        println "Rooms: "
        rooms.sort { it.id }.each {
            println it
        }
    }

    private Room getSuitableRoom(SeatConsumer seatConsumer, Random rand) throws Exception {
        def suitableRooms = rooms.findAll { it.seats >= seatConsumer.count && it.category == seatConsumer.category }
        if (suitableRooms.size() == 0) { // Well maybe we should just plug this guy somewhere else..
            suitableRooms = rooms.findAll { it.seats >= seatConsumer.count }
            if (suitableRooms.size() == 0) {
                println "$seatConsumer could not be assigned a room, please run again.." //Or maybe not, oops
                throw new Exception("No suitable room found!")
            }
        }
        suitableRooms.get(rand.nextInt(suitableRooms.size()))
    }

    private void initialize() {
        File roomsFile = new File("rooms.csv")
        File seatConsumersFile = new File("seatconsumers.csv")

        def data = parseCsv(roomsFile?.newReader("UTF-8"))
        data?.each { line ->
            Room room = [id: (line.id as Integer), seats: (line.seats as Integer), description: line.description, category: (line.category as Integer)]
            rooms.add(room)
        }

        data = parseCsv(seatConsumersFile?.newReader("UTF-8"))
        data?.each { line ->
            SeatConsumer seatConsumer = [count: (line.count as Integer), description: line.description, category: (line.category as Integer)]
            consumers.add(seatConsumer)
        }
    }
}
